// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// PO Notes Model
model PONote {
  noteId    Int       @id @unique @default(autoincrement())
  type      Type   // Enum - Type
  status    Status    @default(PENDING)   // Enum - Status
  note      String    @db.VarChar(1500)
  issueLink  String?
  createdAt DateTime  @default(now())
  dueDate   DateTime?
  isDeleted   Boolean   @default(false)
}

// ** DSM Feature **

// SentimentMeter Model
model SentimentMeter {
  sentimentMeterId Int      @id @unique @default(autoincrement())
  author    Int  // userID
  sentiment    Sentiment   // Enum - Sentiment
  createdAt DateTime @default(now())
}

// Celebration Model
model Celebration {
  celebrationId Int      @id @unique @default(autoincrement())
  author    Int  // userID
  content   String   @db.VarChar(300)
  createdAt DateTime @default(now())
}

// RequestTaggedUser Model
model RequestTaggedUser {
  id Int @id @unique @default(autoincrement())
  userId Int
  requestId Int
  request Request @relation(fields: [requestId], references: [id])
}

// Request Model
model Request {
  id Int @id @unique @default(autoincrement())
  author Int // userID
  content String @db.VarChar(255)
  status RequestStatus @default(PENDING) // Enum - Status
  type RequestType // Enum - Type
  createdAt DateTime @default(now())
  taggedIndividuals RequestTaggedUser[]
}


// Announcement Model
model Announcement {
  announcementId Int  @id @unique @default(autoincrement())
  author    Int  // userID
  content   String   @db.VarChar(255)
  createdAt DateTime @default(now())
}

// Enums

enum Status {
  COMPLETED
  PENDING
  DRAFT
  NONE
}

enum Type {
  ACTION_ITEM
  KEY_DECISION
  AGENDA_ITEM
}

enum Sentiment {
  HAPPY
  GOOD
  OK
  BAD
}

enum RequestStatus {
  PENDING
  APPROVED
  DENIED
}

enum RequestType {
  RESOURCE
  MEETING
}
